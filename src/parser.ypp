%{
#include "../include/wd.h"
#include "../include/db.h"
#include "../include/fileio.h"

#include <map>
#include <string>
#include <cctype>
#include <cstdlib>
#include <sstream>
#include <iostream>
#include <algorithm>

#include <stdio.h>
#include <string.h>

using namespace std;

string MASTER_WD;

Database main_db;

vector<string> tmp;

//-- Lexer prototype required by bison, aka getNextToken()
int yylex(); 
int yyerror(const char *p) { cerr << p<<" Error!" << endl; }
%}

//-- SYMBOL SEMANTIC VALUES -----------------------------
%union {
  int int_val;
  double fl_val; 
  char* a_val;
  char sym;
};
%token <int_val> NUM 
%token <fl_val> DOUBLE FLOAT
%token <a_val> NAME COMPARISION INTEGER CHARACTER DECIMAL
%token <sym> STAR OPA OPM STOP SELECT INSERT DROP DELETE TABLE DATABASE SHOW USE CREATE TABLES DATABASES FROM WHERE COMMA LP RP INTO VALUES UPDATE SET QUIT
%type <val> res exp sel_query1 sel_query2 create_query var insertion val diff_types upd_query1 upd_query2 deletion1 deletion2 comp

//-- GRAMMAR RULES ---------------------------------------
%%
   /* forces bison to process many stmts */
run: res

| QUIT { exit (0); }

res: exp { return 0; }    

exp: USE NAME STOP              {
                                    char* tmp_name = strtok ($2, " ");
                                    tmp_name = strtok (tmp_name, "\n");
                                    tmp_name = strtok (tmp_name, ";");
                                    main_db = Database (string (tmp_name));
                                    if (Database::useDatabase (main_db))
                                        cout << "Database Changed.\n";
                                    else
                                        cout << "ERROR! Database Doesn't Exist.\n";
                                }
| CREATE DATABASE NAME STOP     {
                                    char* tmp_name = strtok ($3, " ");
                                    tmp_name = strtok (tmp_name, "\n");
                                    tmp_name = strtok (tmp_name, ";");
                                    main_db = Database (string (tmp_name));
                                    if (main_db.createDatabase ())
                                        cout << "Database Created.\n";
                                    else
                                        cout << "ERROR! Database Exists.\n";
                                }
| SHOW TABLES STOP              { 
                                    Database::showTables (main_db);
                                }
| SHOW DATABASES STOP           { 
                                    Database::showDatabases (main_db);
                                }
| sel_query1
| sel_query2
| DROP DATABASE NAME STOP       {
                                    char* tmp_name = strtok ($3, " ");
                                    tmp_name = strtok (tmp_name, "\n");
                                    tmp_name = strtok (tmp_name, ";");
                                    main_db = Database (string (tmp_name));
                                    Database::deleteDatabase (main_db);
                                    cout << "Database Deleted.\n";
                                }
| DROP TABLE NAME STOP          {
                                    char* tmp_name = strtok ($3, " ");
                                    tmp_name = strtok (tmp_name, "\n");
                                    tmp_name = strtok (tmp_name, ";");
                                    Database::deleteTable (main_db, string (tmp_name));
                                    cout << "Table Deleted.\n";
                                }
| create_query
| insertion
| upd_query1
| upd_query2
| deletion1
| deletion2

sel_query1: SELECT STAR FROM NAME STOP
                                    {
                                        char* tmp_name = strtok ($4, " ");
                                        tmp_name = strtok (tmp_name, "\n");
                                        tmp_name = strtok (tmp_name, ";");
                                        if (main_db.tableExists (string (tmp_name)))
                                        {
                                            vector<Row> res = Database::selectFromTable (main_db, tmp_name, NULL, NULL, NULL);
                                            Database::printSelectResult (main_db, tmp_name, res);
                                        }
                                        else
                                        {
                                            cout << "ERROR! Table Does Not Exist.\n";
                                        }
                                    }

sel_query2: SELECT STAR FROM NAME WHERE NAME comp diff_types STOP
                                    {
                                        char* tb_name = strtok ($4, " ");
                                        char* col_name = strtok ($6, tmp[0].c_str ());
                                        col_name = strtok (col_name, " ");
                                        if (main_db.tableExists (string (tb_name)))
                                        {
                                            vector<Row> res = Database::selectFromTable (main_db, tb_name, col_name, tmp[0].c_str (), tmp[1].c_str ());
                                            Database::printSelectResult (main_db, tb_name, res);
                                        }
                                        else
                                        {
                                            cout << "ERROR! Table Does Not Exist.\n";
                                        }
                                        tmp.clear ();
                                    }

| SELECT STAR FROM NAME WHERE LP NAME comp diff_types RP STOP
                                    {
                                        char* tb_name = strtok ($4, " ");
                                        char* col_name = strtok ($7, tmp[0].c_str ());
                                        col_name = strtok (col_name, " ");
                                        if (main_db.tableExists (string (tb_name)))
                                        {
                                            vector<Row> res = Database::selectFromTable (main_db, tb_name, col_name, tmp[0].c_str (), tmp[1].c_str ());
                                            Database::printSelectResult (main_db, tb_name, res);
                                        }
                                        else
                                        {
                                            cout << "ERROR! Table Does Not Exist.\n";
                                        }
                                        tmp.clear ();
                                    }

comp: COMPARISION   {
                        tmp.push_back (string ($1));
                    }

create_query: CREATE TABLE NAME LP var RP STOP
                                    {
                                        char* tmp1 = strtok ($3, "(");
                                        string tb_name = string (strtok (tmp1, " "));
                                        vector<string> fields;
                                        vector<FieldType> ftype;
                                        for (int i = 0; i < tmp.size (); i+=2)
                                        {
                                            fields.push_back (tmp[i]);
                                            if (tmp[i+1] == string ("INTEGER"))
                                            {
                                                ftype.push_back (INT_VAL);
                                            }
                                            else if (tmp[i+1] == string ("DOUBLE"))
                                            {
                                                ftype.push_back (DOUBLE_VAL);
                                            }
                                            else if (tmp[i+1] == string ("CHAR"))
                                            {
                                                ftype.push_back (CHAR_ARR);
                                            }
                                        }
                                        Table t (tb_name, main_db.getDatabaseName (), fields, ftype);
                                        main_db.addTable (t);
                                        cout << "Table Created.\n";
                                        tmp.clear ();
                                    }

var: var COMMA var 
| NAME INTEGER    {
                    char* p1 = strtok ($1, " ");
                    char* p2 = strtok (NULL, " ");
                    tmp.push_back (string (p1));
                    string s (p2);
                    std::transform (s.begin(), s.end(), s.begin(), ::toupper);
                    tmp.push_back (s);
                  }
| NAME CHARACTER  {
                    char* p3 = strtok ($1, " ");
                    char* p4 = strtok (NULL, " ");
                    tmp.push_back (string (p3));
                    string s1 (p4);
                    std::transform (s1.begin(), s1.end(), s1.begin(), ::toupper);
                    tmp.push_back (s1);
                  }
| NAME DECIMAL    {
                    char* p5 = strtok ($1, " ");
                    char* p6 = strtok (NULL, " ");
                    tmp.push_back (string (p5));
                    string s2 (p6);
                    std::transform (s2.begin(), s2.end(), s2.begin(), ::toupper);
                    tmp.push_back (s2);
                  }

insertion: INSERT INTO NAME VALUES LP val RP STOP
                                    {
                                        string tb_name (strtok ($3, " "));
                                        Table t = main_db.getTableFromName (tb_name);
                                        if (t.isGood ())
                                        {
                                            vector<FieldType> ft = t.getFieldTypes ();
                                            vector<string> fn = t.getFieldNames ();
                                            Row r;
                                            for (int i = 0; i < ft.size (); i++)
                                            {
                                                switch (ft[i])
                                                {
                                                    case INT_VAL:
                                                      {
                                                        Field f (INT_VAL, atoi (tmp[i].c_str ()));
                                                        r.addField (f, fn[i]);
                                                        break;
                                                      }
                                                    case DOUBLE_VAL:
                                                      {
                                                        const char* tmp_ch_const = tmp[i].c_str ();
                                                        Field f (DOUBLE_VAL, atof (tmp_ch_const));
                                                        r.addField (f, fn[i]);
                                                        break;
                                                    }
                                                    case CHAR_ARR:
                                                      {
                                                        char tmp_ch[MAX_CHAR_SIZE];
                                                        strcpy (tmp_ch, tmp[i].c_str ());
                                                        Field f (CHAR_ARR, tmp_ch);
                                                        r.addField (f, fn[i]);
                                                        break;
                                                      }
                                                }
                                            }
                                            t.write (tb_name, r);
                                            main_db.modifyTable (t, tb_name);
                                            cout << "Row Inserted.\n";
                                            tmp.clear ();
                                        }
                                        else
                                        {
                                            cout << "ERROR! Table Not Found.\n";
                                        }
                                    }

val: val COMMA val
| NUM           {
                    stringstream ss;
                    ss << $1;
                    tmp.push_back (ss.str ());
                }
| DOUBLE        {
                    stringstream ss;
                    ss << $1;
                    tmp.push_back (ss.str ());
                }
| NAME          {
                    stringstream ss;
                    ss << $1;
                    tmp.push_back (ss.str ());
                }

upd_query1: UPDATE NAME SET NAME comp diff_types STOP
                                    {
                                        char* tb_name = strtok ($2, " ");
                                        char* col_name = strtok ($4, tmp[0].c_str ());
                                        col_name = strtok (col_name, " ");
                                        if (main_db.tableExists (string (tb_name)))
                                        {
                                            Database::updateTable (main_db, tb_name, col_name, tmp[1].c_str (), NULL, NULL, NULL);
                                            cout << "Table Updated.\n";
                                        }
                                        else
                                        {
                                            cout << "ERROR! Table Not Found.\n";
                                        }
                                        tmp.clear ();
                                    }

upd_query2: UPDATE NAME SET NAME comp diff_types WHERE NAME comp diff_types STOP 
                                    {
                                        char* tb_name = strtok ($2, " ");
                                        char* col_name1 = strtok ($4, tmp[0].c_str ());
                                        col_name1 = strtok (col_name1, " ");
                                        char* col_name2 = strtok ($8, tmp[2].c_str ());
                                        col_name2 = strtok (col_name2, " ");
                                        if (main_db.tableExists (string (tb_name)))
                                        {
                                            Database::updateTable (main_db, tb_name, col_name1, tmp[1].c_str (), col_name2, tmp[2].c_str (), tmp[3].c_str ());
                                            cout << "Table Updated.\n";
                                        }
                                        else
                                        {
                                            cout << "ERROR! Table Not Found.\n";
                                        }
                                        tmp.clear ();
                                    }
| UPDATE NAME SET NAME comp diff_types WHERE LP NAME comp diff_types RP STOP
                                    {
                                        char* tb_name = strtok ($2, " ");
                                        char* col_name1 = strtok ($4, tmp[0].c_str ());
                                        col_name1 = strtok (col_name1, " ");
                                        char* col_name2 = strtok ($9, tmp[2].c_str ());
                                        col_name2 = strtok (col_name2, " ");
                                        if (main_db.tableExists (string (tb_name)))
                                        {
                                            Database::updateTable (main_db, tb_name, col_name1, tmp[1].c_str (), col_name2, tmp[2].c_str (), tmp[3].c_str ());
                                            cout << "Table Updated.\n";
                                        }
                                        else
                                        {
                                            cout << "ERROR! Table Not Found.\n";
                                        }
                                        tmp.clear ();
                                    }

deletion1: DELETE FROM NAME WHERE NAME comp diff_types STOP 
                                    {
                                        cout << $3 << endl;
                                        tmp.clear ();
                                    }

deletion2: DELETE FROM NAME STOP    {
                                        char* tmp_name = strtok ($3, " ");
                                        tmp_name = strtok (tmp_name, "\n");
                                        tmp_name = strtok (tmp_name, ";");
                                        if (main_db.tableExists (string (tmp_name)))
                                        {
                                            Database::deleteFromTable (main_db, tmp_name, NULL, NULL, NULL);
                                            cout << "Records Deleted Successfully.\n";
                                        }
                                        else
                                        {
                                            cout << "ERROR! Table Not Found.\n";
                                        }
                                    }

diff_types: NUM {
                    stringstream ss;
                    ss << $1;
                    tmp.push_back (ss.str ());
                }
| DOUBLE    {
                stringstream ss;
                ss << $1;
                tmp.push_back (ss.str ());
            }
| NAME      {
                stringstream ss;
                ss << $1;
                tmp.push_back (ss.str ());
            }

%%
//-- FUNCTION DEFINITIONS ---------------------------------
int main()
{
    MASTER_WD = fileio::getwd ();
    while (true)
    {
        cout << "sqliter> ";
        yyparse ();
    }
    return 0;
}
